diff --git a/lib/services/session_manager.dart b/lib/services/session_manager.dart
index 64b42b3..4d8aaf6 100644
--- a/lib/services/session_manager.dart
+++ b/lib/services/session_manager.dart
@@ -1,76 +1,26 @@
-import 'dart:convert';
-import 'package:flutter/material.dart';
 import 'package:shared_preferences/shared_preferences.dart';
-import 'package:supabase_flutter/supabase_flutter.dart';
-import '../screens/login_screen.dart';
-import '../screens/main_shell.dart';
+import '../models/auth_response.dart';
 
-class SessionManager extends StatefulWidget {
-  const SessionManager({super.key, this.initialSession});
+class SessionManager {
+  static const String _sessionKey = 'user_session';
 
-  final Session? initialSession;
-
-  @override
-  State<SessionManager> createState() => _SessionManagerState();
-
-  /// ðŸ”¹ Save a Supabase session locally
-  static Future<void> saveSession(Session session) async {
+  /// Save session data locally
+  Future<void> saveSession(AuthResponse session) async {
     final prefs = await SharedPreferences.getInstance();
-    await prefs.setString('session', jsonEncode(session.toJson()));
+    await prefs.setString(_sessionKey, session.toJson());
   }
 
-  /// ðŸ”¹ Restore session from SharedPreferences
-  static Future<Session?> restoreSession() async {
+  /// Load session data
+  Future<AuthResponse?> loadSession() async {
     final prefs = await SharedPreferences.getInstance();
-    final jsonString = prefs.getString('session');
-    if (jsonString == null) return null;
-
-    try {
-      final sessionMap = jsonDecode(jsonString);
-      final response = await Supabase.instance.client.auth.recoverSession(jsonString);
-      return response.session;
-    } catch (e) {
-      debugPrint("Erreur lors de la restauration de session : $e");
-      return null;
-    }
+    final sessionString = prefs.getString(_sessionKey);
+    if (sessionString == null) return null;
+    return AuthResponse.fromJson(sessionString);
   }
 
-  /// ðŸ”¹ Clear saved session
-  static Future<void> clearSavedSession() async {
+  /// Clear saved session
+  Future<void> clearSavedSession() async {
     final prefs = await SharedPreferences.getInstance();
-    await prefs.remove('session');
-  }
-}
-
-class _SessionManagerState extends State<SessionManager> {
-  Session? _session;
-  bool _loading = true;
-
-  @override
-  void initState() {
-    super.initState();
-    _initSession();
-  }
-
-  Future<void> _initSession() async {
-    if (widget.initialSession != null) {
-      _session = widget.initialSession;
-    } else {
-      _session = await SessionManager.restoreSession();
-    }
-    setState(() => _loading = false);
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    if (_loading) {
-      return const Scaffold(
-        body: Center(child: CircularProgressIndicator()),
-      );
-    }
-
-    return _session == null
-        ? const LoginScreen()
-        : const MainShell();
+    await prefs.remove(_sessionKey);
   }
 }
